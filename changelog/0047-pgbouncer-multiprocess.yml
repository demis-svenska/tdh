title: Update PgBouncer configuration to support multiple processes
key: pgbouncer-multiprocess
date: 2022-04-19
optional_per_env: no
# (optional) Min version of HQ that MUST be deployed before this change can be rolled out (commit hash)
min_commcare_version:
# (optional) Max version of HQ that can be deployed before this change MUST be rolled out (commit hash)
max_commcare_version:
context: |
  This change updates the PgBouncer role to support multiple processes
  on a single machine, so that more CPU cores can be used (PgBouncer
  is single-threaded and uses only one CPU core by default).

details: |
  A new variable `pgbouncer_processes` (default: 1) is now available,
  which can be set per environment for all machines or in the inventory
  for each machine to indicate the desired number of processes.

  The role needs to be re-run to create the new systemd service and update
  the configuration. It will also upgrade PgBouncer to the latest version
  and sets the minimum required version to 1.13, which includes the necessary
  new features (`so_reuseport` and systemd `notify` support).

  The name of the service(s) is now `pgbouncer-multiprocess@1`, ...,
  `pgbouncer-multiprocess@N`, where `N` is the value of `pgbouncer_processes`.
  `pgbouncer-multiprocess@*` can also be used to target all of the existing
  processes.

  `pgbouncer_pool_size` and `pgbouncer_reserve_pool_size` continue to
  indicate the total number for each machine, which will be divided between
  the defined number of processes.

update_steps: |
  1. Set the `pgbouncer_processes` variable as desired (in the environment
  or the inventory).

  2. Run `commcare-cloud <env> ansible-playbook deploy_postgres.yml
  --tags=pgbouncer --limit=pgbouncer`  
  **Warning:** this will restart the PgBouncer service, dropping existing
  connections.

  At a later time, `pgbouncer_processes` and configuration settings can also
  be changed without triggering a full restart, running

  `cchq <env> ansible-playbook deploy_postgres.yml --tags=configure
  --limit=pgbouncer`

  which, if needed, will trigger a reload and add/remove processes.

  Note however that a manual restart (e.g. `commcare-cloud <env>
  run-shell-command pgbouncer "systemctl restart pgbouncer-multiprocess@*"
  -b`) could be needed to apply new values of `pgbouncer_pool_size` and
  `pgbouncer_reserve_pool_size`, because, after a reload, they will only be
  effective when the pool is exhausted and recreated, which is unlikely to
  happen during normal operations.
